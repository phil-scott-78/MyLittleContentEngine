@page "/navigation-example"
@using MyLittleContentEngine.Services.Content.TableOfContents
@inject ITableOfContentService TableOfContentService

<h2>Navigation Info Example</h2>

<p>This example demonstrates the consolidated NavigationInfo API that provides all navigation data in one call.</p>

<div class="mb-4">
    <label class="block mb-2">Enter a URL to test:</label>
    <input @bind="testUrl" class="border px-2 py-1 rounded" placeholder="/cli/getting-started" />
    <button @onclick="LoadNavigationInfo" class="ml-2 px-4 py-1 bg-blue-500 text-white rounded">
        Load Navigation Info
    </button>
</div>

@if (navigationInfo != null)
{
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <!-- Breadcrumbs Section -->
        <div class="border rounded p-4">
            <h3 class="font-bold mb-2">Breadcrumbs</h3>
            <Breadcrumbs Items="@navigationInfo.Breadcrumbs" />
            
            <h4 class="font-semibold mt-4 mb-1">Raw Data:</h4>
            <ul class="text-sm">
                @foreach (var crumb in navigationInfo.Breadcrumbs)
                {
                    <li>
                        @crumb.Name 
                        @if (crumb.Href != null)
                        {
                            <span class="text-gray-500">(→ @crumb.Href)</span>
                        }
                        @if (crumb.IsCurrent)
                        {
                            <span class="text-blue-500">[current]</span>
                        }
                    </li>
                }
            </ul>
        </div>
        
        <!-- Section Info -->
        <div class="border rounded p-4">
            <h3 class="font-bold mb-2">Section Information</h3>
            <dl class="space-y-1">
                <dt class="font-semibold">Section Name:</dt>
                <dd class="ml-4">@navigationInfo.SectionName</dd>
                
                <dt class="font-semibold">Section Path:</dt>
                <dd class="ml-4">@navigationInfo.SectionPath</dd>
                
                <dt class="font-semibold">Page Title:</dt>
                <dd class="ml-4">@navigationInfo.PageTitle</dd>
            </dl>
        </div>
        
        <!-- Previous/Next Navigation -->
        <div class="border rounded p-4 md:col-span-2">
            <h3 class="font-bold mb-2">Previous/Next Navigation</h3>
            <div class="flex justify-between">
                <div>
                    @if (navigationInfo.PreviousPage != null)
                    {
                        <a href="@navigationInfo.PreviousPage.Href" class="text-blue-500 hover:underline">
                            ← @navigationInfo.PreviousPage.Name
                        </a>
                    }
                    else
                    {
                        <span class="text-gray-400">No previous page</span>
                    }
                </div>
                <div>
                    @if (navigationInfo.NextPage != null)
                    {
                        <a href="@navigationInfo.NextPage.Href" class="text-blue-500 hover:underline">
                            @navigationInfo.NextPage.Name →
                        </a>
                    }
                    else
                    {
                        <span class="text-gray-400">No next page</span>
                    }
                </div>
            </div>
        </div>
    </div>
}
else if (hasSearched)
{
    <div class="border border-red-300 bg-red-50 rounded p-4">
        <p class="text-red-700">No navigation info found for URL: @testUrl</p>
    </div>
}

<div class="mt-8 p-4 bg-gray-100 rounded">
    <h3 class="font-bold mb-2">Benefits of Consolidated API</h3>
    <ul class="list-disc ml-5 space-y-1">
        <li>Single async call instead of multiple calls</li>
        <li>All navigation data in one cohesive model</li>
        <li>Reduced latency and improved performance</li>
        <li>Simpler code with less state management</li>
        <li>Consistent data from the same page lookup</li>
    </ul>
    
    <h4 class="font-semibold mt-4 mb-1">Old Way (Deprecated):</h4>
    <pre class="bg-gray-200 p-2 rounded text-sm">
var (prev, next) = await tocService.GetNextPreviousAsync(url);
// Then manually build breadcrumbs, get section info, etc.
    </pre>
    
    <h4 class="font-semibold mt-2 mb-1">New Way:</h4>
    <pre class="bg-gray-200 p-2 rounded text-sm">
var navInfo = await tocService.GetNavigationInfoAsync(url);
// Everything is available: navInfo.Breadcrumbs, navInfo.NextPage, etc.
    </pre>
</div>

@code {
    private string testUrl = "/cli/getting-started";
    private NavigationInfo? navigationInfo;
    private bool hasSearched = false;
    
    private async Task LoadNavigationInfo()
    {
        navigationInfo = await TableOfContentService.GetNavigationInfoAsync(testUrl);
        hasSearched = true;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadNavigationInfo();
    }
}
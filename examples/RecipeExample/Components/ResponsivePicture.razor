@* Responsive image component using srcset for optimal browser selection with LQIP *@
@using RecipeExample
@inject IResponsiveImageContentService ResponsiveImageService

<div class="relative @CssClass" style="@(AspectRatio != null ? $"aspect-ratio: {AspectRatio}" : "")">
    @if (!string.IsNullOrEmpty(LqipDataUrl))
    {
        <img src="@LqipDataUrl" 
             class="absolute inset-0 w-full h-full object-cover blur-sm transition-opacity duration-300" 
             style="filter: blur(8px);" 
             alt="" 
             aria-hidden="true" />
    }
    
    <img srcset="/images/@(FileName)-xs.webp 480w, /images/@(FileName)-sm.webp 768w, /images/@(FileName)-md.webp 1024w, /images/@(FileName)-lg.webp 1440w, /images/@(FileName)-xl.webp 1920w"
         sizes="@Sizes"
         src="/images/@(FileName)-md.webp" 
         class="relative w-full h-full object-cover" 
         alt="@AltText" 
         loading="@Loading"
         width="@Width"
         height="@Height"
         onload="this.previousElementSibling?.style.setProperty('opacity', '0')" />
</div>

@code {
    [Parameter, EditorRequired] public string FileName { get; set; } = string.Empty;
    [Parameter] public string AltText { get; set; } = string.Empty;
    [Parameter] public string CssClass { get; set; } = string.Empty;
    [Parameter] public string Loading { get; set; } = "lazy";
    [Parameter] public string Sizes { get; set; } = "(max-width: 640px) 100vw, (max-width: 768px) 50vw, (max-width: 1024px) 33vw, 400px";
    [Parameter] public int? Width { get; set; }
    [Parameter] public int? Height { get; set; }
    [Parameter] public string? AspectRatio { get; set; }
    
    private string? LqipDataUrl { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await GenerateLqipDataUrl();
        await SetImageDimensions();
    }
    
    private async Task GenerateLqipDataUrl()
    {
        try
        {
            var lqipBytes = await ResponsiveImageService.GenerateLqipAsync(FileName);
            if (lqipBytes != null)
            {
                var base64 = Convert.ToBase64String(lqipBytes);
                LqipDataUrl = $"data:image/webp;base64,{base64}";
            }
        }
        catch (Exception)
        {
            // Silently fail if LQIP generation fails
        }
    }
    
    private async Task SetImageDimensions()
    {
        if (Width.HasValue && Height.HasValue)
            return;
            
        try
        {
            var dimensions = await ResponsiveImageService.GetOriginalImageDimensionsAsync(FileName);
            if (dimensions.HasValue)
            {
                Width ??= dimensions.Value.width;
                Height ??= dimensions.Value.height;
                AspectRatio ??= $"{dimensions.Value.width} / {dimensions.Value.height}";
            }
        }
        catch (Exception)
        {
            // Silently fail if dimension detection fails
        }
    }
}
@page "/blog/{*fileName:nonfile}"
@inject ContentEngineOptions Options
@inject BlogSiteOptions BlogOptions
@inject IMarkdownContentService<BlogSiteFrontMatter> MarkdownContentService
@inject LinkService LinkService 

@if (_post == null)
{
    <div>Post not found ðŸ¤·</div>
    return;
}
<PageTitle>@Options.SiteTitle - @_post.FrontMatter.Title</PageTitle>

<HeadContent>
    <meta property="og:title" content="@_post.FrontMatter.Title" />
    <meta property="og:description" content="@_post.FrontMatter.Description" />
    @if (BlogOptions.SocialMediaImageUrlFactory != null)
    {
        <meta property="og:image" content="@GetSocialImageUrl()" />
    }
    <meta property="og:url" content="@GetFullUrl()" />
    <meta property="og:type" content="article" />
    <meta property="og:site_name" content="@Options.SiteTitle" />
    <meta property="article:published_time" content="@_post.FrontMatter.Date.ToString("yyyy-MM-ddTHH:mm:ssZ")" />
    
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="@_post.FrontMatter.Title" />
    <meta name="twitter:description" content="@(_post.FrontMatter.Description ?? "")" />
    @if (BlogOptions.SocialMediaImageUrlFactory != null)
    {
        <meta name="twitter:image" content="@GetSocialImageUrl()" />
    }
</HeadContent>

<BlogPost MarkdownContentPage="_post" HtmlContent="@_postContent" Series="_series"/>

@code{
    [Parameter] public required string FileName { get; init; }
    MarkdownContentPage<BlogSiteFrontMatter>? _post;
    string? _postContent;
    List<MarkdownContentPage<BlogSiteFrontMatter>>? _series;

    protected override async Task OnInitializedAsync()
    {
        var page = await MarkdownContentService.GetRenderedContentPageByUrlOrDefault(FileName);
        if (page == null)
        {
            _post = null;
            _postContent = null;
            return;
        }
        
        _post = page.Value.Page;
        _postContent = page.Value.HtmlContent;
        
        if (_post != null && !string.IsNullOrWhiteSpace(_post.FrontMatter.Series))
        {
            var allPosts = await MarkdownContentService.GetAllContentPagesAsync();
            _series = allPosts
                .Where(i => string.Equals(i.FrontMatter.Series, _post.FrontMatter.Series, StringComparison.OrdinalIgnoreCase))
                .OrderBy(i => i.FrontMatter.Date)
                .ToList();
        }
    }
    
    private string GetSocialImageUrl()
    {
        if (_post == null || BlogOptions.SocialMediaImageUrlFactory == null) return "";
        return LinkService.GetCanonicalUrl(BlogOptions.SocialMediaImageUrlFactory(_post));
        
    }
    
    private string GetFullUrl() => _post == null ? "" : $"{Options.CanonicalBaseUrl}{BlogOptions.BlogBaseUrl}/{_post.Url}";
}
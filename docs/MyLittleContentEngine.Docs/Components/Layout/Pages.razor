@page "/{*fileName:nonfile}"
@page "/"

@using System.Diagnostics.CodeAnalysis
@using MyLittleContentEngine.Models
@using MyLittleContentEngine.Services.Content
@using Microsoft.AspNetCore.Components.Sections
@using MyLittleContentEngine.Services.Content.TableOfContents
@inject ContentEngineOptions ContentEngineOptions
@inject IMarkdownContentService<DocsFrontMatter> MarkdownContentService
@inject LinkService LinkService
@inject ITableOfContentService TableOfContentService

@if (IsLoaded)
{
    <PageTitle>@ContentEngineOptions.SiteTitle - @_post.FrontMatter.Title</PageTitle>
    <article>
        <header>
            <h1 class="font-display text-2xl lg:text-4xl font-bold tracking-tight text-base-900 dark:text-base-50"> @_post.FrontMatter.Title</h1>
        </header>

        <div
            class="prose dark:prose-invert max-w-full prose-sm md:prose-base min-w-0 prose-headings:scroll-m-18 prose-headings:font-display prose-headings:text-base-900 dark:prose-headings:text-base-50">
            @((MarkupString)_postContent)
        </div>

        @if (_previousPage != null || _nextPage != null)
        {
            <div class="flex my-12 border-t border-base-200 dark:border-base-700 pt-4 lg:pt-8">
            @if (_previousPage != null)
            {
                @NextPreviousButton(_previousPage, false)
            }
            @if (_nextPage != null)
            {
                @NextPreviousButton(_nextPage, true)
            }
            </div>
        }
    </article>
}
else
{
    <PageTitle>@ContentEngineOptions.SiteTitle</PageTitle>
    <p>Not found</p>
}

<SectionContent SectionName="sidebar">
    @if (IsLoaded)
    {
        <OutlineNavigation
            Outline="@_outline" />
    }
</SectionContent>

@code {
    private MarkdownContentPage<DocsFrontMatter>? _post;
    private string? _postContent;
    private OutlineEntry[]? _outline;
    private TableOfContentEntry? _previousPage;
    private TableOfContentEntry? _nextPage;

    [MemberNotNull(nameof(_postContent))]
    [MemberNotNull(nameof(_outline))]
    [MemberNotNull(nameof(_post))]
    bool IsLoaded { get; set; }

    [Parameter] public required string FileName { get; init; } = string.Empty;

    private RenderFragment NextPreviousButton(TableOfContentEntry p, bool isNext) => 
        @<div class="flex flex-col items-@(isNext ? "end" : "start") @(isNext ? "ml-auto" : "") gap-3">
        <a class="inline-flex gap-0.5 justify-center overflow-hidden text-sm font-medium font-display transition rounded-xl bg-base-200 pt-1.5 pb-1 px-3 lg:pt-2 lg:pb.15 lg:px-4  hover:bg-base-300/75 dark:bg-base-800/40 text-base-800 dark:text-base-400 ring-1 dark:ring-inset ring-base-300/75 dark:ring-base-800 dark:hover:bg-base-800 dark:hover:text-base-300"
           aria-label="@(isNext ? "Next" : "Previous"): @p.Name" href="@LinkService.GetLink(p.Href!)">
            @(isNext ? "Next" : "")
            <svg viewBox="0 0 20 20" fill="none" aria-hidden="true" class="mt-0.5 h-5 w-5 @(isNext ? "-mr-1" : "-ml-1") @(isNext ? "" : "rotate-180")">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"
                      d="m11.5 6.5 3 3.5m0 0-3 3.5m3-3.5h-9"></path>
            </svg>
            @(isNext ? "" : "Previous")
        </a>
        <a tabindex="-1" aria-hidden="true"
           class="text-sm lg:text-base font-semibold text-base-700 transition hover:text-base-600 dark:text-base-400 dark:hover:text-base-300"
           href="@LinkService.GetLink(p.Href!)">
            @p.Name</a>
    </div>;
    
    protected override async Task OnInitializedAsync()
    {
        var fileName = FileName;
        if (string.IsNullOrWhiteSpace(fileName))
        {
            fileName = "index";
        }

        var page = await MarkdownContentService.GetRenderedContentPageByUrlOrDefault(fileName);
        if (page == null)
        {
            IsLoaded = false;
            return;
        }

        _outline = page.Value.Page.Outline;
        _post = page.Value.Page;
        _postContent = page.Value.HtmlContent;

        var nextPrevious = await TableOfContentService.GetNextPreviousAsync(page.Value.Page.Url);
        _nextPage = nextPrevious.Next;
        _previousPage = nextPrevious.Previous;

        IsLoaded = true;
    }

}
